apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitlab
  namespace: rds-git
  labels:
    app: gitlab
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: gitlab
  template:
    metadata:
      labels:
        app: gitlab
    spec:
      securityContext:
        runAsUser: 998
        runAsGroup: 998
        fsGroup: 998
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
     initContainers:
  - name: init-permissions
    image: busybox:1.36
    command:
      - "sh"
      - "-c"
      - |
        echo "Ensuring directories exist..."
        ls -ld /var/opt/gitlab /etc/gitlab /etc/ssh || true
    volumeMounts:
      - mountPath: /var/opt/gitlab
        name: gitlab-storage
      - mountPath: /etc/gitlab
        name: gitlab-config
      - mountPath: /etc/ssh
        name: ssh-volume
    securityContext:
      runAsUser: 998
      runAsGroup: 998
      runAsNonRoot: true

      containers:
        - name: gitlab
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: GITLAB_OMNIBUS_CONFIG
              value: |
                external_url '{{ .Values.externalUrl }}';
                gitlab_rails['db_host'] = '{{ .Values.postgresql.host }}';
                gitlab_rails['db_port'] = {{ .Values.postgresql.port }};
                gitlab_rails['db_database'] = '{{ .Values.postgresql.database }}';
                gitlab_rails['db_username'] = File.read('/etc/secrets/postgresql/username');
                gitlab_rails['db_password'] = File.read('/etc/secrets/postgresql/password');
                gitlab_rails['backup_path'] = "/var/opt/gitlab/backups";
                nginx['listen_port'] = 80;
          envFrom:
            - secretRef:
                name: {{ .Values.postgresql.existingSecret }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: ssh
              containerPort: 22
              protocol: TCP
          volumeMounts:
            - mountPath: /var/opt/gitlab
              name: gitlab-storage
            - mountPath: /var/opt/gitlab/backups
              name: gitlab-backup-volume
            - mountPath: /etc/secrets/postgresql
              name: postgres-secret
              readOnly: true
            - mountPath: /etc/gitlab
              name: gitlab-config
            - mountPath: /etc/ssh
              name: ssh-volume
          livenessProbe:
            httpGet:
              path: /-/health
              port: http
            initialDelaySeconds: 300
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /-/readiness
              port: http
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 5
            failureThreshold: 3
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 998
            runAsGroup: 998
            capabilities:
              drop:
                - ALL
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: gitlab-storage
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim | default "gitlab-pvc" }}
        - name: gitlab-backup-volume
          persistentVolumeClaim:
            claimName: {{ .Values.backups.existingClaim | default "gitlab-backup-pvc" }}
        - name: postgres-secret
          secret:
            secretName: {{ .Values.postgresql.existingSecret }}
        - name: gitlab-config
          emptyDir:
            medium: Memory
            sizeLimit: 100Mi
        - name: ssh-volume
          emptyDir:
            medium: Memory
            sizeLimit: 50Mi
